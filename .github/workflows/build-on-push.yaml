name: Build Soggy on push
on:
  push:
    paths:
      - soggy
      - .github/workflows/build-on-push.yaml
    branches-ignore:
      - dependabot/**

jobs:
  build:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: true
          persist-credentials: false

      - name: actions-setup-cmake
        uses: jwlawson/actions-setup-cmake@v1.13.0
      
      - name: Download CMake
        shell: cmake -P {0}
        run: |
          set(cmake_version $ENV{CMAKE_VERSION})
          message(STATUS "Using host CMake version: ${CMAKE_VERSION}")
          if ("${{ runner.os }}" STREQUAL "Windows")
            set(cmake_suffix "windows-x86_64.zip")
            set(cmake_dir "cmake-${cmake_version}-windows-x86_64/bin")
          endif()
        
          set(cmake_url "https://github.com/Kitware/CMake/releases/download/v${cmake_version}/cmake-${cmake_version}-${cmake_suffix}")
          file(DOWNLOAD "${cmake_url}" ./cmake.zip SHOW_PROGRESS)
          execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf ./cmake.zip)
        
          # Add to PATH environment variable
          file(TO_CMAKE_PATH "$ENV{GITHUB_WORKSPACE}/${cmake_dir}" cmake_dir)
          set(path_separator ":")
          if ("${{ runner.os }}" STREQUAL "Windows")
          set(path_separator ";")
          endif()
          file(APPEND "$ENV{GITHUB_PATH}" "$ENV{GITHUB_WORKSPACE}${path_separator}${cmake_dir}")

      - name: Move Soggy src
        shell: powershell
        run: Move-Item -Path  soggy\* -Destination .

      - name: Build
        shell: cmake -P {0}
        run: |
          set(ENV{NINJA_STATUS} "[%f/%t %o/sec] ")
          if ("${{ runner.os }}" STREQUAL "Windows" AND NOT "x${{ matrix.config.environment_script }}" STREQUAL "x")
            file(STRINGS environment_script_output.txt output_lines)
            foreach(line IN LISTS output_lines)
              if (line MATCHES "^([a-zA-Z0-9_-]+)=(.*)$")
                set(ENV{${CMAKE_MATCH_1}} "${CMAKE_MATCH_2}")
              endif()
            endforeach()
          endif()
          file(TO_CMAKE_PATH "$ENV{GITHUB_WORKSPACE}" ccache_basedir)
          set(ENV{CCACHE_BASEDIR} "${ccache_basedir}")
          set(ENV{CCACHE_DIR} "${ccache_basedir}/.ccache")
          set(ENV{CCACHE_COMPRESS} "true")
          set(ENV{CCACHE_COMPRESSLEVEL} "6")
          set(ENV{CCACHE_MAXSIZE} "400M")
          if ("${{ matrix.config.cxx }}" STREQUAL "cl")
            set(ENV{CCACHE_MAXSIZE} "600M")
          endif()
          execute_process(COMMAND ccache -p)
          execute_process(COMMAND ccache -z)
          execute_process(
            COMMAND cmake --build build
            RESULT_VARIABLE result
            OUTPUT_VARIABLE output
            ERROR_VARIABLE output
            ECHO_OUTPUT_VARIABLE ECHO_ERROR_VARIABLE
          )
          if (NOT result EQUAL 0)
            string(REGEX MATCH "FAILED:.*$" error_message "${output}")
            string(REPLACE "\n" "%0A" error_message "${error_message}")
            message("::error::${error_message}")
            message(FATAL_ERROR "Build failed")
          endif()
